
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "psychotree"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('psychotree')
Loading required package: party
Loading required package: grid
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric

Loading required package: sandwich
Loading required package: strucchange
Loading required package: modeltools
Loading required package: stats4
Loading required package: psychotools
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CEMSChoice")
> ### * CEMSChoice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CEMSChoice
> ### Title: CEMS University Choice Data
> ### Aliases: CEMSChoice
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("CEMSChoice", package = "psychotree")
> summary(CEMSChoice$preference)
                        >  =   < NA's
London    : Paris     186 26  91    0
London    : Milano    221 26  56    0
Paris     : Milano    121 32  59   91
London    : StGallen  208 22  73    0
Paris     : StGallen  165 19 119    0
Milano    : StGallen  135 28 140    0
London    : Barcelona 217 19  67    0
Paris     : Barcelona 157 37 109    0
Milano    : Barcelona 104 67 132    0
StGallen  : Barcelona 144 25 134    0
London    : Stockholm 250 19  34    0
Paris     : Stockholm 203 30  70    0
Milano    : Stockholm 157 46 100    0
StGallen  : Stockholm 155 50  98    0
Barcelona : Stockholm 172 41  90    0
> covariates(CEMSChoice$preference)
              specialization location
London             economics    other
Paris     management science    latin
Milano             economics    latin
StGallen             finance    other
Barcelona management science    latin
Stockholm            finance    other
> 
> 
> 
> cleanEx()
> nameEx("DIFSim")
> ### * DIFSim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DIFSim
> ### Title: Artificial Data with Differential Item Functioning
> ### Aliases: DIFSim
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## data
> data("DIFSim", package = "psychotree")
> 
> ## summary of covariates
> summary(DIFSim[,-1])
      age           gender    motivation
 Min.   :16.00   male  :109   1:23      
 1st Qu.:31.00   female: 91   2:41      
 Median :45.00                3:45      
 Mean   :45.84                4:35      
 3rd Qu.:60.00                5:41      
 Max.   :74.00                6:15      
> 
> ## histogram of raw scores
> hist(rowSums(DIFSim$resp), breaks = 0:19 + 0.5)
> 
> 
> 
> cleanEx()
> nameEx("EuropeanValuesStudy")
> ### * EuropeanValuesStudy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EuropeanValuesStudy
> ### Title: European Values Study
> ### Aliases: EuropeanValuesStudy
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## data
> data("EuropeanValuesStudy", package = "psychotree")
> summary(EuropeanValuesStudy$paircomp)
                         >    < NA's
order     : decisions 2136 1293  155
order     : prices    2178  949  457
decisions : prices    1694 1335  555
order     : freedom   2358  761  465
decisions : freedom   1732  860  992
prices    : freedom   1558 1066  960
> 
> ## Not run: 
> ##D ## Bradley-Terry tree resulting in similar results compared to
> ##D ## the (different) tree approach of Lee and Lee (2010)
> ##D evs <- na.omit(EuropeanValuesStudy)
> ##D bt <- bttree(paircomp ~ gender + eduage + birthyear + marital + employment + income + country2,
> ##D   data = evs, alpha = 0.01)
> ##D plot(bt, abbreviate = 2)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("SPISA")
> ### * SPISA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SPISA
> ### Title: SPIEGEL Studentenpisa Data (Subsample)
> ### Aliases: SPISA
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ## data
> data("SPISA", package = "psychotree")
> 
> ## summary of covariates
> summary(SPISA[,-1])
    gender         age          semester   elite            spon    
 female:417   Min.   :18.0   2      :173   no :836   never    :303  
 male  :658   1st Qu.:21.0   4      :123   yes:239   <1/month :127  
              Median :23.0   6      :116             1-3/month:107  
              Mean   :23.1   1      :105             1/week   : 79  
              3rd Qu.:25.0   5      : 99             2-3/week : 73  
              Max.   :40.0   3      : 98             4-5/week : 60  
                             (Other):361             daily    :326  
> 
> ## histogram of raw scores
> hist(rowSums(SPISA$spisa), breaks = 0:45 + 0.5)
> 
> ## Not run: 
> ##D ## See the following vignette for a tree-based DIF analysis
> ##D vignette("raschtree", package = "psychotree")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("Topmodel2007")
> ### * Topmodel2007
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Topmodel2007
> ### Title: Attractiveness of Germany's Next Topmodels 2007
> ### Aliases: Topmodel2007
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data("Topmodel2007", package = "psychotree")
> summary(Topmodel2007$preference)
                  >   <
Barbara : Anni  121  71
Barbara : Hana   98  94
Anni    : Hana   75 117
Barbara : Fiona 101  91
Anni    : Fiona  81 111
Hana    : Fiona 113  79
Barbara : Mandy 130  62
Anni    : Mandy 114  78
Hana    : Mandy 130  62
Fiona   : Mandy 131  61
Barbara : Anja  123  69
Anni    : Anja  112  80
Hana    : Anja  130  62
Fiona   : Anja  119  73
Mandy   : Anja   92 100
> xtabs(~ gender + I(age < 30), data = Topmodel2007)
        I(age < 30)
gender   FALSE TRUE
  male      48   48
  female    48   48
> 
> 
> 
> cleanEx()
> nameEx("bttree")
> ### * bttree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bttree
> ### Title: Bradley-Terry Tree Models
> ### Aliases: bttree plot.bttree print.bttree predict.bttree summary.bttree
> ###   sctest.bttree deviance.bttree logLik.bttree coef.bttree worth.bttree
> ###   weights.bttree
> ### Keywords: tree
> 
> ### ** Examples
> 
> ## package
> library("psychotree")
> 
> ## Germany's Next Topmodel 2007 data
> data("Topmodel2007", package = "psychotree")
> ## BT tree
> tm_tree <- bttree(preference ~ ., data = Topmodel2007, minsplit = 5, ref = "Barbara")
> plot(tm_tree, abbreviate = 1, yscale = c(0, 0.5))
> ## parameter instability tests in root node
> sctest(tm_tree, node = 1)
               gender          age         q1           q2        q3
statistic 17.08798000 3.235655e+01 12.6319505 19.839221850 6.7585592
p.value    0.02167964 7.915466e-04  0.1282764  0.006697916 0.7451515
> ## worth parameters in terminal nodes
> worth(tm_tree)
    Barbara       Anni      Hana     Fiona      Mandy       Anja
3 0.1889324 0.16993451 0.3850798 0.1141502 0.09232354 0.04957957
5 0.1745924 0.12304683 0.2624556 0.2254343 0.10187663 0.11259425
6 0.2659190 0.21277737 0.1609186 0.1945416 0.06274756 0.10309595
7 0.2585021 0.05572946 0.1531208 0.1604636 0.16426634 0.20791763
> 
> ## CEMS university choice data
> data("CEMSChoice", package = "psychotree")
> summary(CEMSChoice$preference)
                        >  =   < NA's
London    : Paris     186 26  91    0
London    : Milano    221 26  56    0
Paris     : Milano    121 32  59   91
London    : StGallen  208 22  73    0
Paris     : StGallen  165 19 119    0
Milano    : StGallen  135 28 140    0
London    : Barcelona 217 19  67    0
Paris     : Barcelona 157 37 109    0
Milano    : Barcelona 104 67 132    0
StGallen  : Barcelona 144 25 134    0
London    : Stockholm 250 19  34    0
Paris     : Stockholm 203 30  70    0
Milano    : Stockholm 157 46 100    0
StGallen  : Stockholm 155 50  98    0
Barcelona : Stockholm 172 41  90    0
> ## BT tree
> cems_tree <- bttree(preference ~ french + spanish + italian + study + work + gender + intdegree,
+   data = CEMSChoice, minsplit = 5, ref = "London")
> plot(cems_tree, abbreviate = 1, yscale = c(0, 0.5))
> worth(cems_tree)
     London      Paris     Milano   StGallen  Barcelona  Stockholm
3 0.2083439 0.12682140 0.15936388 0.06905174 0.42506488 0.01135419
4 0.4315060 0.08629580 0.34016535 0.05204565 0.06059623 0.02939091
7 0.3325497 0.42214899 0.05477658 0.06144424 0.09252110 0.03655937
8 0.3988834 0.22586032 0.08578186 0.13479789 0.09107518 0.06360135
9 0.4103637 0.09623863 0.07697455 0.15767414 0.16423847 0.09451053
> 
> 
> 
> cleanEx()
> nameEx("pctree")
> ### * pctree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pctree
> ### Title: Partial Credit Tree Models
> ### Aliases: pctree plot.pctree print.pctree summary.pctree sctest.pctree
> ###   deviance.pctree logLik.pctree coef.pctree weights.pctree
> ### Keywords: tree
> 
> ### ** Examples
> 
> ## verbal aggression data from package psychotools
> data("VerbalAggression", package = "psychotools")
> 
> ## use response to the second other-to-blame situation (train)
> VerbalAggression$s2 <- VerbalAggression$resp[, 7:12]
> 
> ## exclude subjects who only scored in the highest or the lowest categories
> VerbalAggression <- subset(VerbalAggression, rowSums(s2) > 0 & rowSums(s2) < 12)
> 
> ## fit partial credit tree model
> pct <- pctree(s2 ~ anger + gender, data = VerbalAggression)
> 
> ## just print mob object
> print(pct)
1) gender == {female}; criterion = 1, statistic = 43.544
  2)*  weights = 220 
Terminal node model
PCM item category parameters:
s2.S2WantCurse-C2   s2.S2DoCurse-C1   s2.S2DoCurse-C2 s2.S2WantScold-C1 
            1.486             1.169             3.239             1.097 
s2.S2WantScold-C2   s2.S2DoScold-C1   s2.S2DoScold-C2 s2.S2WantShout-C1 
            2.903             2.006             4.791             1.618 
s2.S2WantShout-C2   s2.S2DoShout-C1   s2.S2DoShout-C2 
            3.768             3.198             6.705 

1) gender == {male}
  3)*  weights = 67 
Terminal node model
PCM item category parameters:
s2.S2WantCurse-C2   s2.S2DoCurse-C1   s2.S2DoCurse-C2 s2.S2WantScold-C1 
           0.5547           -0.2179           -0.1240            0.8065 
s2.S2WantScold-C2   s2.S2DoScold-C1   s2.S2DoScold-C2 s2.S2WantShout-C1 
           1.7020            0.2919            1.7719            1.5697 
s2.S2WantShout-C2   s2.S2DoShout-C1   s2.S2DoShout-C2 
           3.6675            2.1006            5.4388 

> 
> ## show summary for terminal panel nodes
> summary(pct)
$`2`

Partial credit model

Item category parameters:
                  Estimate Std. Error z value Pr(>|z|)    
s2.S2WantCurse-C2   1.4864     0.3034   4.900 9.58e-07 ***
s2.S2DoCurse-C1     1.1691     0.2646   4.419 9.90e-06 ***
s2.S2DoCurse-C2     3.2395     0.4781   6.776 1.23e-11 ***
s2.S2WantScold-C1   1.0970     0.2664   4.118 3.82e-05 ***
s2.S2WantScold-C2   2.9034     0.4733   6.135 8.54e-10 ***
s2.S2DoScold-C1     2.0057     0.2698   7.435 1.04e-13 ***
s2.S2DoScold-C2     4.7910     0.5076   9.439  < 2e-16 ***
s2.S2WantShout-C1   1.6185     0.2680   6.039 1.55e-09 ***
s2.S2WantShout-C2   3.7680     0.4860   7.753 8.97e-15 ***
s2.S2DoShout-C1     3.1982     0.2962  10.799  < 2e-16 ***
s2.S2DoShout-C2     6.7048     0.5753  11.655  < 2e-16 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-likelihood: -689.2 (df = 11) 
Number of iterations in BFGS optimization: 17 


$`3`

Partial credit model

Item category parameters:
                  Estimate Std. Error z value Pr(>|z|)    
s2.S2WantCurse-C2   0.5547     0.5479   1.012 0.311363    
s2.S2DoCurse-C1    -0.2179     0.5066  -0.430 0.667088    
s2.S2DoCurse-C2    -0.1240     0.7796  -0.159 0.873608    
s2.S2WantScold-C1   0.8065     0.4637   1.739 0.081951 .  
s2.S2WantScold-C2   1.7020     0.7893   2.156 0.031052 *  
s2.S2DoScold-C1     0.2919     0.4527   0.645 0.519021    
s2.S2DoScold-C2     1.7719     0.8002   2.214 0.026807 *  
s2.S2WantShout-C1   1.5697     0.4651   3.375 0.000739 ***
s2.S2WantShout-C2   3.6675     0.8782   4.176 2.96e-05 ***
s2.S2DoShout-C1     2.1006     0.4855   4.327 1.51e-05 ***
s2.S2DoShout-C2     5.4388     1.0376   5.242 1.59e-07 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-likelihood: -210.7 (df = 11) 
Number of iterations in BFGS optimization: 18 


> 
> ## plot with default (and currently only) terminal panel function (node_effects)
> plot(pct)
> 
> ## extract item and category parameters
> coef(pct)
  s2.S2WantCurse-C2 s2.S2DoCurse-C1 s2.S2DoCurse-C2 s2.S2WantScold-C1
2         1.4864125       1.1691331       3.2394572         1.0970007
3         0.5546748      -0.2179332      -0.1240234         0.8065186
  s2.S2WantScold-C2 s2.S2DoScold-C1 s2.S2DoScold-C2 s2.S2WantShout-C1
2          2.903416       2.0056831        4.790972          1.618454
3          1.702041       0.2919044        1.771924          1.569742
  s2.S2WantShout-C2 s2.S2DoShout-C1 s2.S2DoShout-C2
2          3.768047        3.198196        6.704804
3          3.667480        2.100605        5.438818
> 
> ## inspect parameter stability tests in the splitting node
> sctest(pct, node = 1)
              anger       gender
statistic 16.233363 4.354433e+01
p.value    0.955604 1.745895e-05
> 
> 
> 
> cleanEx()
> nameEx("raschtree")
> ### * raschtree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raschtree
> ### Title: Rasch Tree Models
> ### Aliases: raschtree plot.raschtree print.raschtree summary.raschtree
> ###   sctest.raschtree deviance.raschtree logLik.raschtree coef.raschtree
> ###   worth.raschtree weights.raschtree
> ### Keywords: tree
> 
> ### ** Examples
> 
> ## artificial data
> data("DIFSim", package = "psychotree")
> 
> ## fit Rasch tree model
> rt <- raschtree(resp ~ age + gender + motivation, data = DIFSim, minsplit = 30)
> plot(rt)
> 
> ## extract item parameters
> coef(rt)
     resp.2    resp.3     resp.4     resp.5    resp.6    resp.7     resp.8
3 1.3280416 3.6397106 -0.1434936 -0.7130513 -1.650363 -0.569757 -0.2857568
4 0.6718733 0.9678199  0.8167709  0.1959556 -1.233363 -1.081086 -0.1297545
5 0.1705976 2.3846344  0.1705976 -0.8671601 -1.686090 -1.088208 -0.3826143
     resp.9    resp.10    resp.11   resp.12   resp.13       resp.14    resp.15
3 -2.244121 -1.0063777 -0.2857568 -2.244121 -1.478676 -2.485482e+00 -1.6503629
4 -1.477172  0.1303662 -1.0073090 -1.393512 -1.233363  5.317753e-01  0.9678199
5 -1.818323  0.2288078  0.2878821 -2.178554 -1.559069  7.939549e-07  0.5988901
    resp.16  resp.17       resp.18   resp.19       resp.20
3 1.5474221 1.547422 -5.697570e-01 -1.006378 -2.649220e-07
4 1.2956655 2.020236  1.840607e-05 -1.007309 -1.946499e-01
5 0.3478274 1.274875 -3.826143e-01 -1.032298 -7.586265e-01
> worth(rt)
      resp.1    resp.2   resp.3    resp.4     resp.5    resp.6     resp.7
3 0.41354287 1.7415845 4.053253 0.2700493 -0.2995084 -1.236820 -0.1562142
4 0.05796085 0.7298341 1.025781 0.8747317  0.2539165 -1.175402 -1.0231250
5 0.31447222 0.4850698 2.699107 0.4850698 -0.5526879 -1.371617 -0.7737354
       resp.8    resp.9    resp.10    resp.11   resp.12   resp.13    resp.14
3  0.12778604 -1.830578 -0.5928348  0.1277860 -1.830578 -1.065133 -2.0719390
4 -0.07179365 -1.419211  0.1883271 -0.9493481 -1.335551 -1.175402  0.5897361
5 -0.06814205 -1.503851  0.5432800  0.6023543 -1.864082 -1.244597  0.3144730
     resp.15   resp.16  resp.17     resp.18    resp.19    resp.20
3 -1.2368201 1.9609649 1.960965 -0.15621418 -0.5928348  0.4135426
4  1.0257807 1.3536263 2.078197  0.05797926 -0.9493481 -0.1366891
5  0.9133623 0.6622996 1.589347 -0.06814205 -0.7178253 -0.4441543
> 
> ## inspect parameter stability tests in all splitting nodes
> sctest(rt, node = 1)
                  age       gender motivation
statistic 43.10856900 41.486403280 82.0383078
p.value    0.08987335  0.006234027  0.9947187
> sctest(rt, node = 2)
                  age gender motivation
statistic 6.12574e+01      0 86.2516724
p.value   1.89323e-04     NA  0.9259663
> 
> ## highlight items 3 and 14 with DIF
> ix <- rep(1, 20)
> ix[c(3, 14)] <- 2
> plot(rt, ylines = 2.5,  cex = c(0.4, 0.8)[ix], 
+   pch = c(19, 19)[ix], col = gray(c(0.5, 0))[ix])
> 
> 
> 
> cleanEx()
> nameEx("rstree")
> ### * rstree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rstree
> ### Title: Rating Scale Tree Models
> ### Aliases: rstree plot.rstree print.rstree summary.rstree sctest.rstree
> ###   deviance.rstree logLik.rstree coef.rstree weights.rstree
> ### Keywords: tree
> 
> ### ** Examples
> 
> ## verbal aggression data from package psychotools
> data("VerbalAggression", package = "psychotools")
> 
> ## responses to the first other-to-blame situation (bus)
> VerbalAggression$s1 <- VerbalAggression$resp[, 1:6]
> 
> ## exclude subjects who only scored in the highest or the lowest categories
> VerbalAggression <- subset(VerbalAggression, rowSums(s1) > 0 & rowSums(s1) < 12)
> 
> ## fit rating scale tree model for the first other-to-blame situation
> rst <- rstree(s1 ~ anger + gender, data = VerbalAggression)
> 
> ## just print mob object
> print(rst)
1) gender == {female}; criterion = 0.987, statistic = 25.12
  2) anger <= 23; criterion = 0.983, statistic = 23.612
    3)*  weights = 173 
Terminal node model
RSM item and threshold parameters:
  s1.S1DoCurse s1.S1WantScold   s1.S1DoScold s1.S1WantShout   s1.S1DoShout 
        0.5054         0.5054         1.0954         1.0688         1.9563 
            C2 
        0.8887 

  2) anger > 23
    4)*  weights = 41 
Terminal node model
RSM item and threshold parameters:
  s1.S1DoCurse s1.S1WantScold   s1.S1DoScold s1.S1WantShout   s1.S1DoShout 
       -0.6582         0.3610         0.2247         0.5922         0.8799 
            C2 
       -0.7253 

1) gender == {male}
  5)*  weights = 68 
Terminal node model
RSM item and threshold parameters:
  s1.S1DoCurse s1.S1WantScold   s1.S1DoScold s1.S1WantShout   s1.S1DoShout 
      -0.48160        0.35253       -0.06342        1.01438        1.60990 
            C2 
       0.87640 

> 
> ## show summary for terminal panel nodes
> summary(rst)
$`3`

Rating scale model

Item location and threshold parameters:
               Estimate Std. Error z value Pr(>|z|)    
s1.S1DoCurse     0.5054     0.1573   3.213  0.00131 ** 
s1.S1WantScold   0.5054     0.1573   3.213  0.00131 ** 
s1.S1DoScold     1.0954     0.1664   6.582 4.65e-11 ***
s1.S1WantShout   1.0688     0.1658   6.444 1.16e-10 ***
s1.S1DoShout     1.9563     0.1941  10.076  < 2e-16 ***
C2               0.8887     0.1574   5.646 1.64e-08 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-likelihood: -612.1 (df = 6) 
Number of iterations in BFGS optimization: 11 


$`4`

Rating scale model

Item location and threshold parameters:
               Estimate Std. Error z value Pr(>|z|)   
s1.S1DoCurse    -0.6582     0.3162  -2.082  0.03735 * 
s1.S1WantScold   0.3610     0.3028   1.192  0.23314   
s1.S1DoScold     0.2247     0.3007   0.747  0.45501   
s1.S1WantShout   0.5922     0.3080   1.923  0.05452 . 
s1.S1DoShout     0.8799     0.3179   2.768  0.00564 **
C2              -0.7253     0.3471  -2.090  0.03665 * 
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-likelihood: -131.9 (df = 6) 
Number of iterations in BFGS optimization: 12 


$`5`

Rating scale model

Item location and threshold parameters:
               Estimate Std. Error z value Pr(>|z|)    
s1.S1DoCurse   -0.48160    0.25664  -1.877 0.060583 .  
s1.S1WantScold  0.35253    0.25480   1.384 0.166498    
s1.S1DoScold   -0.06342    0.25189  -0.252 0.801209    
s1.S1WantShout  1.01438    0.27313   3.714 0.000204 ***
s1.S1DoShout    1.60990    0.30336   5.307 1.11e-07 ***
C2              0.87640    0.25683   3.412 0.000644 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Log-likelihood: -231.9 (df = 6) 
Number of iterations in BFGS optimization: 12 


> 
> ## plot with default (and currently only) terminal panel function (node_effects)
> plot(rst)
> 
> ## extract item and category parameters
> coef(rst)
  s1.S1DoCurse s1.S1WantScold s1.S1DoScold s1.S1WantShout s1.S1DoShout
3    0.5054360      0.5054375   1.09540747      1.0687521    1.9562549
4   -0.6582343      0.3610076   0.22465384      0.5921869    0.8799027
5   -0.4815992      0.3525326  -0.06342232      1.0143779    1.6099031
          C2
3  0.8887416
4 -0.7252541
5  0.8763964
> 
> ## inspect parameter stability tests in all splitting nodes
> sctest(rst, node = 1)
                anger     gender
statistic 25.11991731 17.9176589
p.value    0.01879418  0.0128826
> sctest(rst, node = 2)
                anger gender
statistic 23.61166832      0
p.value    0.01672397     NA
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  22.412 0.084 22.56 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
